---
layout: post
title:  "프로그래머스 - Heap - 디스크 컨트롤러"
date:   2020-03-19 17:37:00 +0530
categories: python3
---
힙
====
디스크 컨트롤러
----
**문제 설명**

하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다.

예를들어

- 0ms 시점에 3ms가 소요되는 A작업 요청
- 1ms 시점에 9ms가 소요되는 B작업 요청
- 2ms 시점에 6ms가 소요되는 C작업 요청

한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다.

- A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)
- B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료(요청에서 종료까지 : 11ms)
- C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 16ms)
이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(= (3 + 11 + 16) / 3)가 됩니다.

하지만 A → C → B 순서대로 처리하면

- A: 3ms 시점에 작업 완료(요청에서 종료까지 : 3ms)
- C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지 : 7ms)
- B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 17ms)
이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(= (3 + 7 + 17) / 3)가 됩니다.

각 작업에 대해 [작업이 요청되는 시점, 작업의 소요시간]을 담은 2차원 배열 jobs가 매개변수로 주어질 때, 작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지 return 하도록 solution 함수를 작성해주세요. (단, 소수점 이하의 수는 버립니다)

**제한 사항**

jobs의 길이는 1 이상 500 이하입니다.
jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.
각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.
각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.
하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.

**입출력 예**

jobs|return
--|--
[[0, 3], [1, 9], [2, 6]]|9
입출력 예 설명
문제에 주어진 예와 같습니다.

0ms 시점에 3ms 걸리는 작업 요청이 들어옵니다.
1ms 시점에 9ms 걸리는 작업 요청이 들어옵니다.
2ms 시점에 6ms 걸리는 작업 요청이 들어옵니다.
<br><br>


**문제 풀이**

```python
import math

def solution(jobs):
    
    add=[]
    stand=0
    answer=0
    while(len(jobs)!=0):
        tmp=[]
        for i in range(len(jobs)):
            if jobs[i][0]<=stand:
                if tmp==[]:
                    tmp=jobs[i]
                elif tmp[1]>jobs[i][1]:
                    tmp=jobs[i]             
                
        if(len(tmp)==0):
            stand+=1
            continue

        add.append(tmp[1]+(stand-tmp[0]))
        stand+=tmp[1]

        del(jobs[jobs.index(tmp)])

        print(tmp)
        print(stand)

    print(add)
    for i in add:
        answer+=i
        
    return math.floor(answer/len(add))
```
- 시작점이 꼭 0으로 시작하는 것만 있는 것이 아니라는 것을 간과하여 첫 번째 시도 실패.
- continue와 break의 차이를 헷갈려서 두 번째 실패.
- 가장 짧은 실행 시간을 가지는 디스크를 찾고 나서 jobs의 인덱스 지정을 잘못해주어 세 번째 실패.
	* 기준점 stand보다 jobs[i][0]이 작으면 jobs[i][1]을 tmp에 추가하게끔 하였다.
	* 그러나 이는 jobs[i][0]의 크기가 순서대로 되어 있다는 것을 가정한 풀이로, jobs[i][0]이 sort되어 있지 않은 경우면 오류가 남을 발견할 수 있었다.
	* tmp에 가장 작은 jobs[i][1]의 값을 가지는 jobs[i] 자체를 저장하여 작업을 하도록 하였다. 그리하여 문제 해결.